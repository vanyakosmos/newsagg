name: cicd

on:
  push:
    branches:
      - master

env:
  CLOUD_RUN_JOB: newsagg
  SENTRY_DSN: ""  # TODO: restore after creating new org
  TARGET_CHANNEL: "@newnewsagg"

jobs:
  build:
    name: Build docker image and push to Artifact Registry
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ vars.DOCKER_REGISTRY }} --quiet

      - name: Build and tag
        run: |
          docker build . --platform=linux/amd64 \
            -t newsagg:latest \
            -t "${{ vars.IMAGE_NAME }}:${{ github.sha }}"

      - name: Push to Artifact Registry
        run: |
          docker push "${{ vars.IMAGE_NAME }}:${{ github.sha }}"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Generate .env.yaml
        run: |
          cat <<EOF > .env.yaml
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TARGET_CHANNEL: "${{ env.TARGET_CHANNEL }}"
          SENTRY_DSN: "${{ env.SENTRY_DSN }}"

          BUCKET_ENDPOINT: storage.googleapis.com
          BUCKET_ACCESS_KEY: ${{ secrets.BUCKET_ACCESS_KEY }}
          BUCKET_SECRET_KEY: ${{ secrets.BUCKET_SECRET_KEY }}
          BUCKET_REGION: auto
          BUCKET_NAME: ${{ vars.BUCKET_NAME }}
          EOF

      - name: "Deploy cloud run job"
        run: |
          gcloud run jobs deploy ${{ env.CLOUD_RUN_JOB }} \
            --image="${{ vars.IMAGE_NAME }}:${{ github.sha }}" \
            --region=${{ vars.GCP_REGION }} \
            --memory=512Mi \
            --max-retries=0 \
            --task-timeout=300s \
            --env-vars-file=.env.yaml \
            --parallelism 1 \
            --service-account ${{ vars.APP_SA }}
      
      - name: "Deploy cloud scheduler"
        run: |
          gcloud scheduler jobs delete ${{ env.CLOUD_RUN_JOB }}-scheduler \
            --location ${{ vars.GCP_REGION }} \
            --quiet \
            || echo "scheduler haven't existed"
          gcloud scheduler jobs create http ${{ env.CLOUD_RUN_JOB }}-scheduler \
            --schedule "*/30 * * * *" \
            --uri https://${{ vars.GCP_REGION }}-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/${{ vars.GCP_PROJECT }}/jobs/${{ env.CLOUD_RUN_JOB }}:run \
            --http-method POST \
            --oauth-service-account-email ${{ vars.CLOUDSCHEDULER_SA }} \
            --location ${{ vars.GCP_REGION }} \
            --project ${{ vars.GCP_PROJECT }}
